*&---------------------------------------------------------------------*
*& Report ZFILE_UPLOAD_USING_CLASS
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZFILE_UPLOAD_USING_CLASS.

*Specify Business Object Type and Key (BUS1065 = Employees))
parameters: p_key type swo_typeid obligatory default '00000111',
            p_type type swo_objtyp obligatory default 'BUS1065',
            p_file type rlgrap-filename obligatory.

at selection-screen on value-request for p_file.
  call function 'F4_FILENAME'
    exporting
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = 'P_FILE'
    importing
      file_name     = p_file.

start-of-selection.

  data: g_filename type string.
  data: g_attsize type wsrm_error-wsrm_direction.
  data: it_content type solix_tab."like standard table of soli.
  data: ta_srgbtbrel type standard table of srgbtbrel, wa_srgbtbrel type srgbtbrel.
  data: lta_sood type standard table of sood, lwa_sood type sood.
  data: dec_kb type p.
  data: ls_lporb type sibflporb.
  data: lv_objtyp type so_obj_tp.
  data: lt_bapirettab type bapirettab.

  lv_objtyp = 'EXT'.
  ls_lporb-instid = p_key.
  ls_lporb-typeid = p_type.

  move  p_file to g_filename.
********************************************
*  DATA: path_and_file LIKE rlgrap-filename,
*        file_format LIKE rlgrap-filetype,
*        bin_filesize LIKE soxwd-doc_length,
*        object_type LIKE soodk-objtp VALUE 'EXT', " см.табл. TSOTD
*        l_objcont LIKE soli OCCURS 0,
*        l_filename LIKE rlgrap-filename,
*        l_nodialog LIKE sonv-flag VALUE 'X',
*        l_cancelled LIKE sonv-flag,
*        put_to_kpro LIKE sonv-flag,
*        lin TYPE i.
*
*  CALL FUNCTION 'SO_OBJECT_UPLOAD'
*         EXPORTING
*              path_and_file           = path_and_file
*              no_dialog               = l_nodialog
*         IMPORTING
*              f_cancelled             = l_cancelled
*              filelength              = bin_filesize
*              act_filetype            = file_format
*              act_filename            = path_and_file
*              act_objtype             = object_type
*              file_put_to_kpro        = put_to_kpro
*         TABLES
*              objcont                 = l_objcont
*         EXCEPTIONS
*              invalid_type            = 1
*              object_type_not_allowed = 2
*              kpro_insert_error       = 3
*              OTHERS                  = 4.
**************************************

    data:
    dpath(4096),
    filename(4096),
    lines_bin     type  i,
    lines_txt     type  i,
    access_info   like  scms_acinf   occurs 1 with header line,
    content_txt   like  sdokcntasc   occurs 1,
    content_bin   like  sdokcntbin   occurs 1,
    buffer_txt    like  sdokcntasc   occurs 1,
    buffer_bin    like  sdokcntbin   occurs 1.


  call function 'GUI_UPLOAD'
    exporting
      filename   = g_filename
      filetype   = 'BIN'
    importing
      filelength = g_attsize
    tables
      data_tab   = it_content.

  if sy-subrc eq 0.
    call method zcl_bc_gos=>gos_attach_file_solitab
      exporting
        iv_name            = g_filename
        iv_content_solitab = it_content
        is_lporb           = ls_lporb
        iv_objtp           = lv_objtyp
        iv_filelength      = g_attsize
      receiving
        rt_messages        = lt_bapirettab.
  endif.

  call method zcl_bc_gos=>gos_get_file_list
    exporting
      is_lporb      = ls_lporb
    importing
      t_attachments = lta_sood
      rt_messages   = lt_bapirettab.

  if lt_bapirettab[] is initial.
    write: /.
    loop at lta_sood into lwa_sood.
      dec_kb = lwa_sood-objlen / 1024.
      if dec_kb < 1.
        dec_kb = 1.
      endif.

      write: / lwa_sood-objdes, dec_kb, 'KB', ' ', lwa_sood-acnam.
    endloop.
  endif.