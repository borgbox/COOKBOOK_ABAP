*&---------------------------------------------------------------------*
*& Report  ZEXE_TRANSACTION
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zexe_transaction.

*----------------------------------------------------------------------*
*       CLASS lcl_handle_transacao DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_handle_transacao DEFINITION.

  PUBLIC SECTION.

    METHODS: manipula_requisicao FOR EVENT finished       OF if_os_transaction IMPORTING status,
             salvar_requisicao   FOR EVENT save_requested OF if_os_transaction,
             preparar_salvar     FOR EVENT save_prepared  OF if_os_transaction.

ENDCLASS.                    "lcl_handle_transacao DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_handle_transaction IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_handle_transacao IMPLEMENTATION.

  METHOD manipula_requisicao.
    BREAK-POINT.
    MESSAGE 'Transação comitada' TYPE 'S'.
  ENDMETHOD.                    "manipula_requisicao

  METHOD salvar_requisicao.
  ENDMETHOD.                    "salvar_requisicao

  METHOD preparar_salvar.
  ENDMETHOD.                    "preparar_salvar

ENDCLASS.                    "lcl_handle_transaction IMPLEMENTATION

*** Objeto que tratara os eventos da da operação transacional
DATA go_handle_transacao    TYPE REF TO lcl_handle_transacao.
DATA go_transaction_manager TYPE REF TO if_os_transaction_manager.
DATA go_transaction         TYPE REF TO if_os_transaction.
DATA gs_zfuncionario        TYPE zfuncionario.

LOAD-OF-PROGRAM.
  cl_os_system=>init_and_set_modes(
    EXPORTING
      i_external_commit = oscon_false                 " Não permite a execução de commits
      i_update_mode     = oscon_dmode_update_task  ).

************************************
*** START-OF-SELECTION           ***
************************************
START-OF-SELECTION.

  " Receba a instância do gereciador de transaçao
  go_transaction_manager = cl_os_system=>get_transaction_manager( ).
  " Objeto que representa e controla a transação
  go_transaction         = go_transaction_manager->create_transaction( ).

  CREATE OBJECT go_handle_transacao.

  SET HANDLER go_handle_transacao->manipula_requisicao FOR go_transaction.

  TRY .
      " Inicia transação
      go_transaction->start( ).

      SELECT SINGLE * FROM zfuncionario INTO gs_zfuncionario WHERE cpf = '06033337458'.

      gs_zfuncionario-salario = gs_zfuncionario-salario + 10.

      MODIFY zfuncionario FROM gs_zfuncionario.

*go_transaction->undo( ).

      go_transaction->end( ).

    CATCH cx_os_transaction.
      MESSAGE 'Erro de contexto' TYPE 'E'.
    CATCH cx_os_check_agent_failed.
      MESSAGE 'Erro de contexto' TYPE 'E'.
  ENDTRY.


************************************************
*** Execução do programa continua
************************************************
  BREAK-POINT.
  SELECT SINGLE * FROM zfuncionario INTO gs_zfuncionario WHERE cpf = '06033337458'.
  WRITE :/ 'Novo Salário: ', gs_zfuncionario-salario.