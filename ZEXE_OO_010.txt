*&---------------------------------------------------------------------*
*& Report  ZEXE_OO_010
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  zexe_oo_010.

*----------------------------------------------------------------------*
*       CLASS lcl_handle_transacao DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_handle_transacao DEFINITION.

  PUBLIC SECTION.

    METHODS: manipula_requisicao FOR EVENT finished       OF if_os_transaction IMPORTING status,
             salvar_requisicao   FOR EVENT save_requested OF if_os_transaction,
             preparar_salvar     FOR EVENT save_prepared  OF if_os_transaction.

ENDCLASS.                    "lcl_handle_transacao DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_handle_transaction IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_handle_transacao IMPLEMENTATION.

  METHOD manipula_requisicao.
    BREAK-POINT.
    MESSAGE 'Transação comitada' TYPE 'S'.
  ENDMETHOD.                    "manipula_requisicao

  METHOD salvar_requisicao.
  ENDMETHOD.                    "salvar_requisicao

  METHOD preparar_salvar.
  ENDMETHOD.                    "preparar_salvar

ENDCLASS.                    "lcl_handle_transaction IMPLEMENTATION

*************************************************************************
*** 01 - Objeto que tratara os eventos da da operação transacional*******
*************************************************************************
DATA go_handle_transacao    TYPE REF TO lcl_handle_transacao.
DATA go_transaction_manager TYPE REF TO if_os_transaction_manager.
DATA go_transaction         TYPE REF TO if_os_transaction.
*************************************************************************

DATA: go_zca_funcionario TYPE REF TO zca_funcionario_pers,
      go_zcl_funcionario TYPE REF TO zcl_funcionario_pers.

PARAMETERS: p_cpf TYPE char13,
            p_nome TYPE char50,
            p_sobr TYPE char50,
            p_sal  TYPE dec10_2,
            p_tp   TYPE char50,
            p_ins RADIOBUTTON GROUP g1,
            p_del RADIOBUTTON GROUP g1,
            p_ler RADIOBUTTON GROUP g1,
            p_mod RADIOBUTTON GROUP g1.


*************************************************************************
*** 02 - Inicilializa configurações para manipulação do contexto      ***
*************************************************************************
LOAD-OF-PROGRAM.
  cl_os_system=>init_and_set_modes(
    EXPORTING
      i_external_commit = oscon_false                 " Não permite a execução de commits
      i_update_mode     = oscon_dmode_update_task  ).
*************************************************************************

AT SELECTION-SCREEN.

*************************************************************************
*** 03 - Inicilializa variáveis para manipulação do contexto          ***
*************************************************************************
  " Receba a instância do gereciador de transaçao
  go_transaction_manager = cl_os_system=>get_transaction_manager( ).
  " Objeto que representa e controla a transação
  go_transaction         = go_transaction_manager->create_transaction( ).

  CREATE OBJECT go_handle_transacao.

  SET HANDLER go_handle_transacao->manipula_requisicao FOR go_transaction.
*************************************************************************

  go_zca_funcionario = zca_funcionario_pers=>agent.


****************************************
*** INICIA CONTEXTO TRANSACIONAL     ***
****************************************
  TRY.
    go_transaction->start( ).

      IF p_ins = 'X'.
        TRY .
            go_zcl_funcionario = go_zca_funcionario->create_persistent( p_cpf ).
            go_zcl_funcionario->set_cargo( p_tp ).
            go_zcl_funcionario->set_nome( p_nome ).
            go_zcl_funcionario->set_sobrenome( p_sobr ).
            go_zcl_funcionario->set_salario( p_sal ).
          CATCH cx_os_object_existing.
            MESSAGE 'Registro já existe' TYPE 'E'.
        ENDTRY.

      ENDIF.

      IF p_mod = 'X'.

        TRY .
            go_zcl_funcionario = go_zca_funcionario->get_persistent( p_cpf ).
            go_zcl_funcionario->set_cargo( p_tp ).
            go_zcl_funcionario->set_nome( p_nome ).
            go_zcl_funcionario->set_sobrenome( p_sobr ).
            go_zcl_funcionario->set_salario( p_sal ).
          CATCH cx_os_object_not_found.
        ENDTRY.

      ENDIF.

      IF p_del = 'X'.
        TRY .
            go_zca_funcionario->delete_persistent( p_cpf ).
          CATCH cx_os_object_not_existing.
        ENDTRY.
      ENDIF.

****************************************
*** FECHA CONTEXTO TRANSACIONAL     ***
****************************************
      go_transaction->end( ).

    CATCH cx_os_transaction.
      MESSAGE 'Erro de contexto' TYPE 'E'.
    CATCH cx_os_check_agent_failed.
      MESSAGE 'Erro de contexto' TYPE 'E'.
  ENDTRY.

  IF p_ler = 'X'.

    DATA lt_obj TYPE osreftab.
    DATA ls_obj TYPE osref.

    DATA lo_query TYPE REF TO if_os_query.

    TRY .
        lo_query = cl_os_system=>get_query_manager( )->create_query(
                                                i_filter = 'NOME = PAR1' ).
        lt_obj = zca_funcionario_pers=>agent->if_os_ca_persistency~get_persistent_by_query(
                      i_par1 = p_nome
                      i_query = lo_query ).

      CATCH cx_os_query_error.

      CATCH cx_os_object_not_found.

    ENDTRY.

    LOOP AT lt_obj INTO ls_obj.

      TRY .
          go_zcl_funcionario  ?= ls_obj.

          p_cpf  = go_zcl_funcionario->get_cpf( ).
          p_nome = go_zcl_funcionario->get_nome( ).
          p_sobr = go_zcl_funcionario->get_sobrenome( ).
          p_sal  = go_zcl_funcionario->get_salario( ).
          p_tp   = go_zcl_funcionario->get_cargo( ).

        CATCH cx_os_object_not_found.

        CATCH cx_sy_move_cast_error.

      ENDTRY.

    ENDLOOP.

  ENDIF.

START-OF-SELECTION.